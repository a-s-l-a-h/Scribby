<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net8.0-tizen</TargetFrameworks> -->

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>ScribbyApp</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>ScribbyApp</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.companyname.scribbyapp</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">11.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">13.1</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.1" />
		<PackageReference Include="NLua" Version="1.7.5" />
		<PackageReference Include="Plugin.BLE" Version="3.1.0" />
	</ItemGroup>

	<!-- ===================================================================== -->
	<!-- Native Library References                                             -->
	<!-- ===================================================================== -->
	<ItemGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">
		<!-- llama.cpp related (example, replace with actual filenames and ABIs if you have them for Android) -->
		<!--
		<AndroidNativeLibrary Include="Platforms\Android\libs\arm64-v8a\libllama.so" Condition="Exists('Platforms\Android\libs\arm64-v8a\libllama.so')">
			<Link>lib\arm64-v8a\libllama.so</Link>
		</AndroidNativeLibrary>
		<AndroidNativeLibrary Include="Platforms\Android\libs\arm64-v8a\libggml.so" Condition="Exists('Platforms\Android\libs\arm64-v8a\libggml.so')">
			<Link>lib\arm64-v8a\libggml.so</Link>
		</AndroidNativeLibrary>
		-->
		<!-- Add other llama.cpp .so files for Android here (e.g., libggml-base.so, libggml-cpu.so, libchat.so) -->
	</ItemGroup>

	<ItemGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">
		<!-- llama.cpp related (example, replace with actual filenames and kind if you have them for iOS) -->
		<!--
		<NativeFileReference Include="Platforms\iOS\libs\libllama.a" Kind="Static" Condition="Exists('Platforms\iOS\libs\libllama.a')" />
		<NativeFileReference Include="Platforms\iOS\libs\libggml.a" Kind="Static" Condition="Exists('Platforms\iOS\libs\libggml.a')" />
		-->
		<!-- Or if they are .dylib:
		<NativeFileReference Include="Platforms\iOS\libs\libllama.dylib" Kind="Dynamic" Condition="Exists('Platforms\iOS\libs\libllama.dylib')" />
		-->
		<!-- Add other llama.cpp .a or .dylib files for iOS here -->
	</ItemGroup>

	<ItemGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">
		<!-- llama.cpp related (example, replace with actual filenames and kind if you have them for MacCatalyst) -->
		<!--
		<NativeFileReference Include="Platforms\MacCatalyst\libs\libllama.dylib" Kind="Dynamic" Condition="Exists('Platforms\MacCatalyst\libs\libllama.dylib')" />
		<NativeFileReference Include="Platforms\MacCatalyst\libs\libggml.dylib" Kind="Dynamic" Condition="Exists('Platforms\MacCatalyst\libs\libggml.dylib')" />
		-->
		<!-- Add other llama.cpp .dylib files for MacCatalyst here -->
	</ItemGroup>

	<ItemGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">
		<!-- llama.cpp related DLLs -->
		<!-- chat.dll -->
		<Content Include="Platforms\Windows\libs\x64\chat.dll" Condition="$(RuntimeIdentifier.Contains('x64')) AND EXISTS('Platforms\Windows\libs\x64\chat.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>chat.dll</Link>
		</Content>
		<Content Include="Platforms\Windows\libs\x86\chat.dll" Condition="$(RuntimeIdentifier.Contains('x86')) AND EXISTS('Platforms\Windows\libs\x86\chat.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>chat.dll</Link>
		</Content>

		<!-- ggml-base.dll -->
		<Content Include="Platforms\Windows\libs\x64\ggml-base.dll" Condition="$(RuntimeIdentifier.Contains('x64')) AND EXISTS('Platforms\Windows\libs\x64\ggml-base.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>ggml-base.dll</Link>
		</Content>
		<Content Include="Platforms\Windows\libs\x86\ggml-base.dll" Condition="$(RuntimeIdentifier.Contains('x86')) AND EXISTS('Platforms\Windows\libs\x86\ggml-base.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>ggml-base.dll</Link>
		</Content>

		<!-- ggml-cpu.dll -->
		<Content Include="Platforms\Windows\libs\x64\ggml-cpu.dll" Condition="$(RuntimeIdentifier.Contains('x64')) AND EXISTS('Platforms\Windows\libs\x64\ggml-cpu.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>ggml-cpu.dll</Link>
		</Content>
		<Content Include="Platforms\Windows\libs\x86\ggml-cpu.dll" Condition="$(RuntimeIdentifier.Contains('x86')) AND EXISTS('Platforms\Windows\libs\x86\ggml-cpu.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>ggml-cpu.dll</Link>
		</Content>

		<!-- ggml.dll -->
		<Content Include="Platforms\Windows\libs\x64\ggml.dll" Condition="$(RuntimeIdentifier.Contains('x64')) AND EXISTS('Platforms\Windows\libs\x64\ggml.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>ggml.dll</Link>
		</Content>
		<Content Include="Platforms\Windows\libs\x86\ggml.dll" Condition="$(RuntimeIdentifier.Contains('x86')) AND EXISTS('Platforms\Windows\libs\x86\ggml.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>ggml.dll</Link>
		</Content>

		<!-- llama.dll -->
		<Content Include="Platforms\Windows\libs\x64\llama.dll" Condition="$(RuntimeIdentifier.Contains('x64')) AND EXISTS('Platforms\Windows\libs\x64\llama.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>llama.dll</Link>
		</Content>
		<Content Include="Platforms\Windows\libs\x86\llama.dll" Condition="$(RuntimeIdentifier.Contains('x86')) AND EXISTS('Platforms\Windows\libs\x86\llama.dll')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>llama.dll</Link>
		</Content>
		<!-- Optional .lib files for llama.cpp related DLLs if you have them and want to include them for some reason (not typically needed for P/Invoke) -->
		<!--
		<Content Include="Platforms\Windows\libs\x64\llama.lib" Condition="$(RuntimeIdentifier.Contains('x64')) AND EXISTS('Platforms\Windows\libs\x64\llama.lib')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>llama.lib</Link>
		</Content>
		<Content Include="Platforms\Windows\libs\x86\llama.lib" Condition="$(RuntimeIdentifier.Contains('x86')) AND EXISTS('Platforms\Windows\libs\x86\llama.lib')">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Link>llama.lib</Link>
		</Content>
		-->
	</ItemGroup>

	<ItemGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">
		<!-- llama.cpp related (example, replace with actual filename if you have them for Tizen) -->
		<!--
		<SharedLibrary Include="Platforms\Tizen\libs\libllama.so" Condition="Exists('Platforms\Tizen\libs\libllama.so')" />
		<SharedLibrary Include="Platforms\Tizen\libs\libggml.so" Condition="Exists('Platforms\Tizen\libs\libggml.so')" />
		-->
		<!-- Add other llama.cpp .so files for Tizen here -->
	</ItemGroup>
	<!-- ===================================================================== -->

	<ItemGroup>
	  <MauiXaml Update="Views\ChatLLMPage.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	  <MauiXaml Update="Views\ConnectPage.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	  <MauiXaml Update="Views\ControlPage.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	  <MauiXaml Update="Views\HomePage.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	  <MauiXaml Update="Views\ScriptPage.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </MauiXaml>
	</ItemGroup>

</Project>